using UnityEngine;
using System.Collections;
using Architecture.Agents;

[RequireComponent(typeof(<CLASSNAME>AgentPerception))]
[RequireComponent(typeof(<CLASSNAME>AgentInstructionsComponent))]
[RequireComponent(typeof(<CLASSNAME>AgentComponent))]
public class <CLASSNAME>Component: MonoBehaviour{

	protected IReactiveAgent<<CLASSNAME>AgentPerception,<CLASSNAME>AgentKnowledge> agent { get; set; }
	protected IReactiveAgentInstructions<<CLASSNAME>AgentPerception,<CLASSNAME>AgentKnowledge> instructions { get; set; }
	
	void Start(){
		// AGENT'S CONFIGURATION WITH THE GIVEN INSTRUCTIONS
		// SETTING THE PERCEPTION CONFIGURATION
		agent = GetComponent<IReactiveAgent<<CLASSNAME>AgentPerception,<CLASSNAME>AgentKnowledge>>();
		instructions = GetComponent<IReactiveAgentInstructionsComponent<<CLASSNAME>AgentPerception,<CLASSNAME>AgentKnowledge>>().Instructions;
		agent.ObjectsFilter = instructions.Filter;
		agent.OnEnterObjectHandler = instructions.OnEnterObjectHandler;
		agent.OnExitObjectHandler = instructions.OnExitObjectHandler;
		agent.UpdaterFunction = instructions.UpdaterFunction;

		// LOADING THE INSTRUCTIONS

		// LOADING THE ACTIONS
		foreach(var action in instructions.Actions){
			agent.AddAction(action.Name,action.Action);
		}
		// LOADING THE STATES
		foreach(var state in instructions.States){
			agent[state] = instructions[state];
		}
		// LOADING THE TRANSITION
		agent.TransitionFunction = instructions.TransitionFunction;
	}
}